{"name":"Python# 3.10.2","tagline":"Documentation","body":"__Python# (Python Sharp)__ is a free open-source Python module created by Daniel Lawson that allows the braching, convenient creation of objects.\r\n\r\n```py\r\nfrom PythonSHARP import *\r\n\r\nplayerInfoStuff = [\r\n    Instance('Health', 'IntStore', [['Value', 0, 0]]),\r\n    Instance('Level', 'IntStore', [['Value', 1, 0]]),\r\n    Instance('XP', 'FloatStore', [['Value', 0.0, 0.0]]),\r\n    Instance('XP Max', 'FloatStore', [['Value', 10.0, 0.0]]),\r\n    Instance('Health', 'IntStore', [['Value', 100, 0]),\r\n    Instance('Name', 'StringStore', [['Name', '', '']]),\r\n    Instance('Character', 'ObjectStore', [['Value', None, None]])\r\n    ]\r\n\r\nobjects = Instance('ObjectStorage', 'service', [])\r\n\r\nobjects.newChild(Instance('PlayerInfo', 'folder', []))\r\nplayerInfo = objects.findSpecificChild('PlayerInfo', 'folder')\r\n\r\nfor s in list(playerInfoStuff): playerInfo.newChild(s)\r\n```\r\n\r\n# Table of Contents\r\n\r\n- [Functions](#functions)\r\n\r\n- [Local Variables](#local-variables)\r\n\r\n- [Instances](#instances)\r\n\r\n  - Info Functions\r\n\r\n  - Children Functions\r\n\r\n  - Children Locator Functions\r\n  \r\n  - Instance Variables\r\n\r\n## Functions\r\n\r\n- `itemsAddty()`: returns the sum of all items in a list (_first_).\r\n\r\n    ```py\r\n    print(itemsAddty([42, 5, -2]))\r\n    ```\r\n    ```\r\n    45.0\r\n    ```\r\n  \r\n- `itemsSubty()`: returns the diffence of all items in a list (_first_).\r\n\r\n    ```py\r\n    print(itemsSubty([100, 50, 25, 5, -1]))\r\n    ```\r\n    ```\r\n    21.0\r\n    ```\r\n\r\n- `itemsMulty()`: returns the product of all items in a list (_first_).\r\n\r\n    ```py\r\n    print(itemsMulty([25, 4, 4]))\r\n    ```\r\n    ```\r\n    400.0\r\n    ```\r\n  \r\n- `itemsDidty()`: returns the quotient of all items in a list (_first_).\r\n\r\n    ```py\r\n    print(itemsDidty([42, 7, 3]))\r\n    ```\r\n    ```\r\n    2.0\r\n    ```\r\n\r\n- `rangeLimit()`: sets a limit of the _first_'s range. If higher than the maximum (_secound_), it returns the _secound_'s value; and vice versa.\r\n\r\n    ```py\r\n    print(rangeLimit(1, 0, 10))\r\n    print(rangeLimit(5, 0, 10))\r\n    print(rangeLimit(12, 0, 10))\r\n    print(rangeLimit(-5, 0, 10))\r\n    print(rangeLimit(3, 0, 10))\r\n    ```\r\n    ```\r\n    1\r\n    5\r\n    10\r\n    0\r\n    3\r\n    ```\r\n\r\n- `feturn()`: returns either _secound_ or _third_ depending on the Boolean of _first_. If true, then _secound_. If false, then _third_.\r\n\r\n    ```py\r\n    print(feturn(False, 'Yes', 'No'))\r\n    print(feturn(True, 'Yes', 'No'))\r\n    ```\r\n    ```\r\n    No\r\n    Yes\r\n    ```\r\n\r\n- `listInit()`: returns a number regrading the first instance of an item in a list (_first_) that matches _secound_. Returns ***None*** if there was no items that matched _secound_.\r\n\r\n    ```py\r\n    print(listInit([0, 2, 1], 0))\r\n    print(listInit([0, 2, 1], 2))\r\n    print(listInit([0, 2, 1], 1))\r\n    ```\r\n    ```\r\n    0\r\n    1\r\n    2\r\n    ```\r\n\r\n- `listInits()`: returns a list of numbers regrading instances of items that matches _secound_ in _first_.\r\n\r\n    ```py\r\n    numbers = [0, 1, 0, 2, 0, 2, 0, 4, 4, 0]\r\n\r\n    print(listInits(numbers, 0))\r\n    print(listInits(numbers, 2))\r\n    print(listInits(numbers, 4))\r\n    ```\r\n    ```\r\n    [0, 2, 4, 6, 9]\r\n    [3, 5]\r\n    [7, 8]\r\n    ```\r\n\r\n- `filterList()`: returns a copy of list of _first_ without items that matches _secound_.\r\n  \r\n    ```py\r\n    numbers = [0, 1, 0, 0, 2, 0, 3, 4, 0, 5]\r\n    print(filterList(numbers, 0))\r\n    ```\r\n    ```\r\n    [1, 2, 3, 4, 5]\r\n    ```\r\n\r\n- `findGreatest()`: returns the biggest item in a list (_first_).\r\n    \r\n    ```py\r\n    print(findGreatest([0, 2, 4, 1, 3, 5.2, 5]))\r\n    ```\r\n    ```\r\n    5.2\r\n    ```\r\n    \r\n    `findGreatestIndex()` return the biggest item's index.\r\n    \r\n - `findSmallest()`: returns the smallest item in a list (_first_).\r\n    \r\n    ```py\r\n    print(findSmalest([0, 2, 4, 1, 3, 5.2, 5]))\r\n    ```\r\n    ```\r\n    0\r\n    ```\r\n    \r\n    `findSmallestIndex()` return the biggest item's index.\r\n    \r\n- `reverse()`: returns a positive number to a negivite one, and vice versa.\r\n\r\n    ```py\r\n    print(reverse(2))\r\n    print(reverse(-3))\r\n    print(reverse(4.2))\r\n    print(reverse(-6.9))\r\n    ```\r\n    ```\r\n    -2.0\r\n    3.0\r\n    -4.2\r\n    6.9\r\n    ```\r\n    \r\n- `genNumList()`: generates a list containing numbers from _first_ to _secound_.\r\n\r\n    ```py\r\n    print(genNumList(1, 10))\r\n    ```\r\n    ```\r\n    [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]\r\n    ```\r\n    \r\n- `itemsInt()`, `itemsFloat()`, `itemsStr()`, `itemsList()`: converts all items in a list (_first_) to an integer, float, string, and list.\r\n\r\n    ```py\r\n    print(itemsInt([1.0, 2.0, 3.0]))\r\n    print(itemsFloat([4, 5, 6]))\r\n    print(itemsStr([7, 8, 9]))\r\n    print(itemsList(['first', 'secound', 'third']))\r\n    ```\r\n    ```\r\n    [1, 2, 3]\r\n    [4.0, 5.0, 6.0]\r\n    ['7', '8', '9']\r\n    [['first'], ['secound'], ['third']]\r\n    ```\r\n    \r\n- `truth()`: returns true, false, or ***None*** depending on _first_'s value. Returns _first_ if it doesn't match any keywords.\r\n\r\n    ```py\r\n    print(truth('yes'))\r\n    print(truth('no'))\r\n    print(truth('nothing'))\r\n    print(truth('abc'))\r\n    ```\r\n    ```\r\n    True\r\n    False\r\n    None\r\n    abc\r\n    ```\r\n    \r\n    ##### Keywords\r\n    - True\r\n        - true\r\n        - yes\r\n        - correct\r\n        - on\r\n        - 1\r\n    - False\r\n        - false\r\n        - no\r\n        - incorrect\r\n        - off\r\n        - 0\r\n    - None\r\n        - none\r\n        - nothing\r\n        - nil\r\n        - null\r\n        - _empty string_\r\n\r\n- `menu()`: allows you to provide a mutlichoice input into a console for the user to pick from. Provide a list of options with a list (_secound_).\r\n  \r\n    ```py\r\n    answer = menu(None, ['first', 'secound', 'third'], False)\r\n    ```\r\n    ```\r\n    0: first\r\n    1: secound\r\n    2: third\r\n    └> \r\n    ```\r\n  \r\n    If you want to provide a caption for your input, provide a string for _first_. Otherwise not, provide an empty string or ***None***.\r\n  \r\n    ```py\r\n    answer = menu('anwser below', ['first', 'secound', 'third'], False)\r\n    ```\r\n    ```\r\n    anwser below\r\n    0: first\r\n    1: secound\r\n    2: third\r\n    └> \r\n    ```\r\n  \r\n    To allow an empty response, set _third_ to true. If the user provided as such, it would return ***None***.\r\n\r\n### Local Variables\r\n**Local Variables** allows you to make variables for temporary use. After their main use is over, they can be removed later on. These variables can also be renamed as well. Let's assign `Localment()` to **`teams`** to make it a home for variables regrading teams.\r\n\r\n```py\r\nteams = Localment()\r\n```\r\n\r\n  - `new()` & `define()`: creates a local variable named after _first_. The *`new()`* function would set the value to ***None***. The other one, *`define()`*, whould set it to _secound_.\r\n\r\n  ```py\r\n  teams.define('red', 0)\r\n  teams.define('blue', 0)\r\n  teams.define('yellow', 0)\r\n  teams.define('green', 0)\r\n  ```\r\n\r\n  - `set()`: changes the value of a local variable (_first_) to _secound_.\r\n\r\n  ```py\r\n  teams.set('red', 8)\r\n  teams.set('blue', 10)\r\n  teams.set('yellow', 2)\r\n  teams.set('green', 5)\r\n  ```\r\n  \r\n  - `change()`: increases the value of an variable (_first_) by _secound_. Using `bange()` world decrease it.\r\n  \r\n  ```py\r\n  teams.define('red', 0)\r\n  teams.define('blue', 0)\r\n  teams.define('yellow', 0)\r\n  teams.define('green', 0)\r\n  \r\n  teams.change('red', 8)\r\n  teams.change('blue', 10)\r\n  teams.chnage('yellow', -2)\r\n  teams.change('green', 5)\r\n  ```\r\n\r\n  - `get()`: returns the value of a local variable (_first_). Returns ***None*** if variable doesn't exist.\r\n\r\n  ```py\r\n  print(teams.get('red'))\r\n  print(teams.get('blue'))\r\n  print(teams.get('yellow'))\r\n  print(teams.get('green'))\r\n  print(teams.get('purple'))\r\n  ```\r\n  ```\r\n  8\r\n  10\r\n  2\r\n  5\r\n  None\r\n  ```\r\n  \r\n  - `find()`: returns the name of a variable in their housing variable based on index (_first_). Returns ***None*** if variable doesn't exist.\r\n  \r\n  ```py\r\n  print(teams.find(0)) # red\r\n  print(teams.find(1)) # blue\r\n  print(teams.find(2)) # yellow\r\n  print(teams.find(3)) # green\r\n  print(teams.find(4)) # purple (doesn't exist)\r\n  ```\r\n  ```\r\n  red\r\n  blue\r\n  yellow\r\n  green\r\n  None\r\n  ```\r\n\r\n  - `rename()`: renames a local variable (_first_) to _secound_.\r\n  \r\n  ```py\r\n  teams.rename('red', 'Red Team')\r\n  teams.rename('blue', 'Blue Team')\r\n  teams.rename('yellow', 'Yellow Team')\r\n  teams.rename('green', 'Green Team')\r\n  ```\r\n  \r\n  - `remove()`: remove a local varaible (_first_).\r\n  \r\n  ```py\r\n  teams.remove('yellow')\r\n\r\n  print(teams.get('red'))\r\n  print(teams.get('blue'))\r\n  print(teams.get('yellow'))\r\n  print(teams.get('green'))\r\n  ```\r\n  ```\r\n  8\r\n  10\r\n  None\r\n  5\r\n  ```\r\n  \r\n  - `variables()`: returns the list of all local variables in a variable.\r\n  \r\n  ```py\r\n  print(teams.variables())\r\n  ```\r\n  \r\n  ```\r\n  [['red', 8], ['blue', 10], ['green', 5]]\r\n  ```\r\n\r\n### Instances\r\n**Instances** is a feature that allows you to create branching objects that contains names (subjects), classes, and properties (props for short). Using the `Instance()` function, you can create objects with this. Let's assign this to **`workspace`** to make a master object (service).\r\n\r\n```py\r\nworkspaceProps = [['Project Name', 'Project', 'untitled']]\r\nworkspace = Instance('Workspace', 'Workspace', workspaceProps)\r\n```\r\n\r\n#### Info Functions\r\nThese functions would gather and modify infomation about an object; their subject, class, and props, and return them.\r\n\r\n- `Sub()`, `Class()`, & `Props()`: returns an object's subject, class, or props.\r\n\r\n    ```py\r\n    print(workspace.Sub())\r\n    print(workspace.Class())\r\n    print(workspace.Props())\r\n    ```\r\n    ```\r\n    Workspace\r\n    Workspace\r\n    [['Project Name', 'Project', 'untitled']]\r\n    ```\r\n  \r\n- `sitSub()`, `sitClass()`, & `sitProps()`: sets an object's subject, class, or props to _first_.\r\n\r\n    ```py\r\n    workspace.sitSub('Workspace?')\r\n    workspace.sitClass('workSpace')\r\n    workspace.sitProps([workspaceProps[0], ['Oragnic?', False, False]])\r\n\r\n    print(workspace.Sub())\r\n    print(workspace.Class())\r\n    print(workspace.Props())\r\n    ```\r\n    ```\r\n    Workspace?\r\n    workSpace\r\n    [['Project Name', 'Project', 'untitled'], ['Oragnic?', False, False]]\r\n    ```\r\n  \r\n- `findProp()`: returns a list of a prop (_first_)'s infomation: name, current value, and default value.\r\n\r\n    ```py\r\n    print(workspace.findProp('Project Name'))\r\n    ```\r\n    ```\r\n    ['Project Name', 'Project', 'untitled']\r\n    ```\r\n  \r\n- `gitProp()`: returns the current value of a prop (_first_).\r\n\r\n    ```py\r\n    print(workspace.gitProp('Project Name'))\r\n    ```\r\n    ```\r\n    Project\r\n    ```\r\n  \r\n- `sitProp()`: sets the value of a prop (_first_) to _secound_. Use `ritProp()` to set the prop to the default value.\r\n\r\n    ```py\r\n    workspace.sitProp('Project Name', 'Cool Game')\r\n    print(workspace.gitProp('Project Name'))\r\n    ```\r\n    ```\r\n    Cool Game\r\n    ```\r\n  \r\n- `parent()`: returns the object's parent as an object, allowing you to get its subject, class, props, and even children. You can also moddify them and manage their children.\r\n\r\n    ```py\r\n    workspace.newChild(Instance('Some Object', 'object', []))\r\n    someObject = workspace.findChild('Some Object')\r\n\r\n    print(someObject.Sub())\r\n    print(someObject.parent().Sub())\r\n    ```\r\n    ```\r\n    Some Object\r\n    Workspace\r\n    ```\r\n  \r\n    If necessary, you can use the `assignParentAs()` function to change an object's parent.\r\n  \r\n    ```py\r\n    someObject.assignParentAs(objectStore)\r\n    ```\r\n  \r\n#### Children (Nested Objects) Functions\r\n\r\n- `newChild()`: adds a new object inside an instance.\r\n\r\n    ```py\r\n    workspace.newChild(Instance('Score', 'IntStore', [['Value', 0, 0]]))\r\n    ```\r\n    \r\n    You can also make clones of the instance easily with the `clone()` function.\r\n  \r\n- `clearChild()`: removes a child from an instance based on _first_'s object.\r\n\r\n    ```py\r\n    child = workspace.findChild('Score')\r\n    workspace.clearChild(child)\r\n    ```\r\n    \r\n    You can use `clear()` to remove the instance.\r\n\r\n- `clearChildren()`: removes children from an instance based on _first_'s object.\r\n\r\n    ```py\r\n    workspace.clearChildren()\r\n    ```\r\n\r\n- `clearAllChildren()`: removes all children from an instance.\r\n\r\n    ```py\r\n    workspace.clearAllChildren()\r\n    ```\r\n  \r\n- `replaceChild()`: replaces a child with a new object (_secound_) inside an instance.\r\n\r\n    ```py\r\n    child = workspace.findChild('Score')\r\n    newObj = Instance('Score', 'FloatStore', [['Value', 0.0, 0.0]])\r\n    workspace.replaceChild(child, newObj)\r\n    ```\r\n  \r\n- `replaceChildren()`: replaces all matching children with a new object (_secound_) inside an instance.\r\n\r\n    ```py\r\n    workspace.replaceChildren(children, newObj)\r\n    ```\r\n  \r\n#### Children Locator Functions\r\n\r\n- `getChildren()`: returns the list of all children from an instance.\r\n\r\n  ```py\r\n  print(workspace.getChildren())\r\n  ```\r\n  \r\n- `getChildbyIndex()`: returns a children based on index.\r\n\r\n  ```py\r\n  workspace.newChild(Instance('Object1', 'object', []))\r\n  workspace.newChild(Instance('Object2', 'object', []))\r\n  workspace.newChild(Instance('Object3', 'object', []))\r\n  \r\n  print(workspace.getChildbyIndex(0).Sub())\r\n  print(workspace.getChildbyIndex(1).Sub())\r\n  print(workspace.getChildbyIndex(2).Sub())\r\n  print(workspace.getChildbyIndex(3))\r\n  ```\r\n  ```\r\n  Object1\r\n  Object2\r\n  Object3\r\n  None\r\n  ```\r\n  \r\n- `findChild()`: finds the first child named as such (_first_) from an instance. Returns ***None*** if no child exists named as such.\r\n\r\n  ```py\r\n  print(workspace.findChild('Score').Class())\r\n  ```\r\n  ```\r\n  IntStore\r\n  ```\r\n  \r\n- `findFirstChild()`: finds the first child based on finding its class (_first_). Returns ***None*** if no child exists classified as such.\r\n\r\n  ```py\r\n  print(workspace.findFirstChild('IntStore').Sub())\r\n  ```\r\n  ```\r\n  Score\r\n  ```\r\n  \r\n- `findSpecificChild()`: finds the first child named (_first_) and classified (_secound_) as such. Returns ***None*** if no child exists named/classified as such.\r\n\r\n  ```py\r\n  print(workspace.findSpecificChild('Score', 'IntStore').Sub())\r\n  ```\r\n  ```\r\n  Score\r\n  ```\r\n\r\n- `findFirstChildren()`: returns a list of objects that are classified (_first_) as such.\r\n\r\n  ```py\r\n  workspace.findFirstChildren('IntStore')\r\n  ```\r\n  \r\n- `findRelatedChildren()`: returns a list of objects named as such (_first_) from an instance.\r\n\r\n  ```py\r\n  workspace.findRelatedChildren('Score')\r\n  ```\r\n  \r\n- `locateRelatedChildren()`: returns a list of objects named (_first_) and classified (_secound_) as such.\r\n\r\n  ```py\r\n  workspace.locateRelatedChildren('Score', 'IntScore')\r\n  ```\r\n\r\n- `waitForChild()`: waits for a child (_first_) in an instance for their existence \\[subject]\\. Delays the script until found.\r\n  \r\n  ```py\r\n  workspace.waitForChild('Score')\r\n  ```\r\n  \r\n- `waitForFirstChild()`: waits for a child (_first_) in an instance for their existence \\[class]\\. Delays the script until found.\r\n\r\n  ```py\r\n  workspace.waitForFirstChild('IntStore')\r\n  ```\r\n  \r\n- `waitForSpecificChild()`: waits for a child (_first_ & _secound_) in an instance for their existence \\[name & class]\\. Delays the script until found.\r\n\r\n  ```py\r\n  workspace.waitForSpecificChild('Score', 'IntStore')\r\n  ```\r\n\r\n- `doesChildExist()`: returns a Boolean if it's true if the instance owns a child named as such.\r\n\r\n  ```py\r\n  print(workspace.doesChildExist('Score'))\r\n  print(workspace.doesChildExist('HighScore'))\r\n  ```\r\n  ```\r\n  True\r\n  False\r\n  ```\r\n  \r\n- `doesFirstChildExist()`: returns a Boolean if it's true if the instance owns a child classified as such.\r\n\r\n  ```py\r\n  print(workspace.doesFirstChildExits('IntStore'))\r\n  print(workspace.doesFirstChildExits('StringStore'))\r\n  ```\r\n  ```\r\n  True\r\n  False\r\n  ```\r\n\r\n- `doesSpecificChildExist()`: returns a Boolean if it's true if the instance owns a child classified as such.\r\n\r\n  ```py\r\n  print(workspace.doesFirstChildExits('HighScore', 'IntStore'))\r\n  print(workspace.doesFirstChildExits('Score', 'IntStore'))\r\n  print(workspace.doesFirstChildExits('Name', 'StringStore'))\r\n  ```\r\n  ```\r\n  False\r\n  True\r\n  False\r\n  ```\r\n  \r\n- `findNamePairs()`: returns the first child in an instance that matches the name of another object. Returns ***None*** if no child exists named as such.\r\n\r\n  ```py\r\n  altScore = Instance('Score', 'NumberStore', [['Value', 0.0, 0.0]])\r\n  print(workspace.findNamePairs(altScore).Sub(),\r\n        workspace.findNamePairs(altScore).Class(),\r\n        workspace.findNamePairs(altScore).Props())\r\n  ```\r\n  ```\r\n  Score IntStore [['Value', 0, 0]]\r\n  ```\r\n  \r\n  Using `getNamePairs()` would return a list of children that matches the name of the object.\r\n  \r\n- `findClassPairs()`: returns the first child in an instance that matches the class of another object. Returns ***None*** if no child exists classified as such.\r\n\r\n  ```py\r\n  highScore = Instance('HighScore', 'IntStore', [['Value', 0, 0]])\r\n  print(workspace.findClassPairs(highScore).Sub(),\r\n        workspace.findClassPairs(highScore).Class(),\r\n        workspace.findClassPairs(highScore).Props())\r\n  ```\r\n  ```\r\n  Score IntStore [['Value', 0, 0]]\r\n  ```\r\n  \r\n  Using `getClassPairs()` would return a list of children that matches the clas of the object.\r\n\r\n- `findPairs()`: returns the first child in an instance that matches both the name & class of another object. Returns ***None*** if no matching child exists.\r\n\r\n  ```py\r\n  outsider = Instance('Score', 'IntStore', [['Value', 0, 0]])\r\n  print(workspace.findPairs(outsider).Sub(),\r\n        workspace.findPairs(outsider).Class(),\r\n        workspace.findPairs(outsider).Props())\r\n  ```\r\n  ```\r\n  Score IntStore [['Value', 0, 0]]\r\n  ```\r\n  \r\n  Using `getPairs()` would return a list of matching children.\r\n\r\n#### Instance Variables\r\nInstance Variables are variables stored instance an object.\r\n\r\n- `NEW()`: creates a new variable named as _first_.\r\n\r\n    ```py\r\n    workspace.newChild(Instance('PlayerChar', 'humanoid', []))\r\n    workspace.findChild('PlayerChar').NEW('direction', 90)\r\n    ```\r\n\r\n- `GET()`: returns the value of a variable. Returns ***None*** if the variable doesn't exist.\r\n\r\n    ```py\r\n    print(workspace.findChild('PlayerChar').GET('direction'))\r\n    ```\r\n    ```\r\n    90\r\n    ```\r\n    \r\n    The `INDEX()` function returns the name of a variable based on index.\r\n\r\n- `SET()`: sets the value of a variable.\r\n\r\n    ```py\r\n    workspace.findChild('PlayerChar').SET('direction', 180)\r\n    ```\r\n\r\n- `DEL()`: removes a variable.\r\n\r\n    ```py\r\n    workspace.findChild('PlayerChar').DEL('direction')\r\n    ```\r\n\r\n**Copyright (©) 2020 Daniel Lawson**\r\n","note":"Don't delete this file! It's used internally to help with page regeneration."}